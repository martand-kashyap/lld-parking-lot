@startuml class-diagram parking-lot
'skinparam classAttributeIconSize 0
top to bottom direction

enum ParkingSpotType {
    COMPACT,
    LARGE,
    MOTORCYCLE,
    HANDICAPPED
}
enum VehicleType {
    CAR,
    TRUCK,
    VAN,
    MOTORCYCLE
}
enum PaymentStatus {
    UNPAID,
    PAID,
    REFUNDED,
    FAILED,
    PENDING
}
enum AccountStatus {
    ACTIVE,
    CLOSED,
    CANCELLED,
    BLACKLISTED,
    NONE
}

class Address {
   - name : String
   - streetAddress : String
   - city : String
   - state : String
   - zipCode : String

   + getAddress() : String
}
class Person {
   - name : String
   - address : Address
   - phone : String
   - email : String
}

abstract class Vehicle {
    - registrationNumber: String
    - type : VehicleType

    - spot : ParkingSpot

    + park(ParkingSpot spot) : boolean
    + remove() : boolean
}
class Car
class Motorcycle
class Truck
class Van

abstract class ParkingSpot {
    - parkingSpotType : ParkingSpotType
    - isFree : boolean

    + ParkingSpot(ParkingSpotType type)
}
class Compact
class Large
class Handicapped
class MotorcycleSpot

abstract class Account {
    - username : String
    - password : String
    - person : Person
    - status : AccountStatus

    + {abstract} login() : void
    + {abstract} logout() : void
    + {abstract} resetPassword() : void
    + {abstract} updateAccount() : void
    + {abstract} viewAccount() : void

    + Account(String username, String password, Person person)
}
class Admin {
    + Admin(String username, String password, Person person)

    + login() : void
    + logout() : void
    + resetPassword() : void
    + updateAccount() : void
    + viewAccount() : void

    + addParkingSpot(ParkingSpotType type) : void
    + addEntrance(String name, Entrance entrance) : void
    + addExit(String name, Exit exit) : void
    + addDisplayBoard(DisplayBoard board) : void
    + assignParkingAttendant(Exit exit, ParkingAttendant attendant) : void
    + setParkingRate(ParkingRate rate) : void
}

class ParkingAttendant {
    + ParkingAttendant(String username, String password, Person person)

    + login() : void
    + logout() : void
    + resetPassword() : void
    + updateAccount() : void
    + viewAccount() : void

    + processTicket(Ticket ticket) : boolean
}

class Entrance {
    - final id : String

    + Entrance(String id)
    + createTicket(Vehicle vehicleToPark, ParkingSpot spot) : Ticket
}
class Exit {
   - final id : String

   + Exit(String id)
   + processTicket(Ticket ticket) : boolean
}
class DisplayBoard {
    - final String id;

    + DisplayBoard()
    + String displayAvailableSpots()
}
class ParkingRate  {
    - hour : int
    - rate : double
}

class Payment {
    - paymentId : String
    - amount : double
    - timestamp : Date
    - status : PaymentStatus

    + Payment(double amount)
    + {abstract} initiateTransaction() : boolean
}
class Cash
class Card

class Ticket {
    - ticketNumber : String;
    - timeOfEntry : Date;
    - tmeOfExit : Date;
    - double cost;

    - Vehicle vehicle;
    - Payment payment;
    - Entrance entrance;
    - Exit exit;

    + Ticket(Vehicle vehicle, Entrance entrance, ParkingSpot spot)
}

class ParkingLot {
  - {static} ParkingLot INSTANCE

  - final parkingLotName : String
  - final address : Address
  - parkingRate : ParkingRate
  - displayBoard : DisplayBoard

  - entrances : Map<String, Entrance>
  - exits : Map<String, Exit>

  - parkingSpots : Map<ParkingSpotType, LinkedList<ParkingSpot>>
  ' - usedSpots : Map<ParkingSpotType, ArrayList<ParkingSpot>>
  - tickets : Map<String, Ticket>

  - ParkingLot()
  + {static} getInstance() : ParkingLot

  + isParkingFull() : boolean
  + isParkingFullForVehicle(Vehicle vehicle) : boolean
  + getAvailableSpots(): Map<ParkingSpotType, Integer>

  + synchronized findAvailableSpotForVehicle(Vehicle vehicle) : ParkingSpot
  + synchronized parkVehicle(Vehicle vehicleToPark, String entranceName) : Ticket
}

'Relationships

'1. Inheritance (IS-A)
together {
    Vehicle <|-- Car : extends
    Vehicle <|-- Motorcycle : extends
    Vehicle <|-- Truck : extends
    Vehicle <|-- Van : extends
}
together {
    ParkingSpot <|-- Compact : extends
    ParkingSpot <|-- Large : extends
    ParkingSpot <|-- Handicapped : extends
    ParkingSpot <|-- MotorcycleSpot : extends
}
together {
    Account <|-- Admin : extends
    Account <|-- ParkingAttendant : extends
}
together {
'    Cash -right-|> Payment : extends
'    Card --|> Payment : extends
    Payment <|-- Cash : extends
    Payment <|-- Card : extends
}

'2. Association (1-way)
ParkingSpot --> Vehicle : association
Payment -right-> Ticket : association
Exit --> Ticket : association
Entrance --> Ticket : association
Vehicle --> Ticket : association
together {
    Admin <-- ParkingLot : association
    ParkingAttendant <-- ParkingLot : association
}

'3. Composition
ParkingLot *-- ParkingSpot : composition
ParkingLot *-- Entrance : composition
ParkingLot *-- Exit : composition
ParkingLot *-left- Ticket : composition
ParkingLot *-right- ParkingRate : composition
ParkingLot *-- DisplayBoard : composition
@enduml